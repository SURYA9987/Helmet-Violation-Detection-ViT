!pip install ultralytics
from ultralytics import YOLO
model = YOLO('yolov10m.pt')  # Pretrained weights
import os

base_path = "/kaggle/input"
for dataset in os.listdir(base_path):
    print(dataset)

# Define the path for the new data.yaml file in a writable directory
new_yaml_path = "/kaggle/working/data.yaml"

yaml_content = """train: /kaggle/input/yolov8-11/dataset/images/train
val: /kaggle/input/yolov8-11/dataset/images/val

nc: 4  # number of classes
names: ['Helmet', 'Non-Helmet', 'Bike','Licence plate']

augment: true
hsv_h: 0.015
hsv_s: 0.7
hsv_v: 0.4

"""
# Write the corrected YAML file
with open(new_yaml_path, "w", encoding="utf-8") as file:
    file.write(yaml_content)

print(f"New data.yaml created at: {new_yaml_path}")
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load YOLOv10 model
model = YOLO('yolov10m.pt')  

# Train the model
results = model.train(
    data=new_yaml_path,
    epochs=150,
    imgsz=640,
    batch=8,
    device=0,
    workers=4
)


# âœ… Extract final metrics (from the last epoch)
metrics = results.metrics

print(f"\nğŸ“Š Final Validation Results:")
print(f"Precision       : {metrics['precision']:.4f}")
print(f"Recall          : {metrics['recall']:.4f}")
print(f"mAP@0.5         : {metrics['mAP50']:.4f}")
print(f"mAP@0.5:0.95    : {metrics['mAP50-95']:.4f}")

history = results.results_dict

epochs = range(len(history['metrics/precision(B)']))

plt.figure(figsize=(12, 6))

# Precision
plt.subplot(1, 2, 1)
plt.plot(epochs, history['metrics/precision(B)'], label='Precision')
plt.plot(epochs, history['metrics/recall(B)'], label='Recall')
plt.xlabel("Epoch")
plt.ylabel("Score")
plt.title("Precision & Recall over Epochs")
plt.legend()

# mAP
plt.subplot(1, 2, 2)
plt.plot(epochs, history['metrics/mAP50(B)'], label='mAP@0.5')
plt.plot(epochs, history['metrics/mAP50-95(B)'], label='mAP@0.5:0.95')
plt.xlabel("Epoch")
plt.ylabel("Score")
plt.title("mAP over Epochs")
plt.legend()

plt.tight_layout()
plt.show()
# âœ… Get training history
history = results.results_dict
epochs = range(len(history['train/box_loss']))

# âœ… Plot All Metrics and Losses
fig, axs = plt.subplots(3, 4, figsize=(20, 12))
fig.suptitle("YOLOv10 Training Progress", fontsize=16)

# Training Losses
axs[0, 0].plot(epochs, history['train/box_loss'])
axs[0, 0].set_title('train/box_loss')

axs[0, 1].plot(epochs, history['train/cls_loss'])
axs[0, 1].set_title('train/cls_loss')

axs[0, 2].plot(epochs, history['train/dfl_loss'])
axs[0, 2].set_title('train/dfl_loss')

# Validation Losses
axs[1, 0].plot(epochs, history['val/box_loss'])
axs[1, 0].set_title('val/box_loss')

axs[1, 1].plot(epochs, history['val/cls_loss'])
axs[1, 1].set_title('val/cls_loss')

axs[1, 2].plot(epochs, history['val/dfl_loss'])
axs[1, 2].set_title('val/dfl_loss')

# Metrics
axs[2, 0].plot(epochs, history['metrics/precision(B)'])
axs[2, 0].set_title('metrics/precision(B)')

axs[2, 1].plot(epochs, history['metrics/recall(B)'])
axs[2, 1].set_title('metrics/recall(B)')

axs[2, 2].plot(epochs, history['metrics/mAP50(B)'])
axs[2, 2].set_title('metrics/mAP50(B)')

axs[2, 3].plot(epochs, history['metrics/mAP50-95(B)'])
axs[2, 3].set_title('metrics/mAP50-95(B)')

# Hide any empty subplots
axs[0, 3].axis('off')
axs[1, 3].axis('off')

# Label and layout
for ax in axs.flat:
    ax.set(xlabel='Epoch', ylabel='Value')
    ax.grid(True)

plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()



!pip install -q ultralytics
!pip install -q easyocr
!pip install -q twilio

om ultralytics import YOLO
import cv2
import easyocr
from twilio.rest import Client
import os
from IPython.display import Video, display

# Load YOLOv8 model (helmet detection)
helmet_model = YOLO('/kaggle/input/datamodel/runs/detect/train/weights/best.pt')

# EasyOCR setup
ocr_reader = easyocr.Reader(['en'])

# Twilio setup
account_sid = 'AC26ebbe3932c57c0f2f6c60038d1568ee'
auth_token = '8c7dcf96ca934bff6ef3b466513b40fa'
twilio_number = '+19786934978'
client = Client(account_sid, auth_token)

# Plate-to-phone mapping (Example plates)
plate_to_phone = {
    "TN68AJ0661": "+919659339243",
    "49CA~9121": "+917339511092",
    "TN47BC1018": "+917092816796"
}

# Initialize a set to keep track of plates for which messages have already been sent
plates_sent = set()

# Load video
cap = cv2.VideoCapture('/kaggle/input/video-dataset1/WhatsApp Video 2025-04-15 at 18.40.20_507f8fb2.mp4')

# Prepare output writer
first_frame = True
out = None

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    if first_frame:
        height, width = frame.shape[:2]
        out = cv2.VideoWriter('/kaggle/working/final_output.mp4',
                              cv2.VideoWriter_fourcc(*'mp4v'),
                              30, (width, height))
        first_frame = False

    # Helmet detection using YOLO
    results = helmet_model(frame)
    boxes = results[0].boxes
    helmet_labels = results[0].names
    no_helmet_detected = False

    for box in boxes:
        cls = int(box.cls[0])
        label = helmet_labels[cls]
        if label == "no_helmet":  # Adjust this to your 'no-helmet' class name
            no_helmet_detected = True

    # License plate reading using EasyOCR
    plate_number = None
    ocr_results = ocr_reader.readtext(frame)
    for (bbox, text, prob) in ocr_results:
        if prob > 0.5 and 5 <= len(text) <= 12:  # Filter based on plate size and confidence
            plate_number = text.upper().replace(" ", "")
            break

    # If helmet violation (no helmet) and valid license plate detected
    if no_helmet_detected and plate_number and plate_number in plate_to_phone:
        if plate_number not in plates_sent:
            phone = plate_to_phone[plate_number]
            message = f"Helmet violation detected for vehicle {plate_number}. A fine will be issued."
            client.messages.create(
                body=message,
                from_=twilio_number,
                to=phone
            )
            plates_sent.add(plate_number)  # Add the plate to the set to prevent future messages
            print(f"Sent message to {phone}")

    # Annotate frame with detection results
    annotated_frame = results[0].plot()
    out.write(annotated_frame)

cap.release()
out.release()

# Show the final output video
display(Video("/kaggle/working/final_output.mp4", embed=True, width=640, height=480))
